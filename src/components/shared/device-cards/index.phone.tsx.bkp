"use client";

/**
 * Adapted from generation by: https://github.com/pmndrs/gltfjsx
 */

import React, {
  type PointerEventHandler,
  Suspense,
  useEffect,
  useState,
  useCallback,
} from "react";
import { Bounds, Environment } from "@react-three/drei";
import { Canvas } from "@react-three/fiber";
import {
  useMotionValue,
  motion,
  animate,
  useTransform,
  useSpring,
  type HoverHandlers,
} from "framer-motion";
import useMeasure from "react-use-measure";
import { Model } from "./model";
import { LaptopModel } from "./laptop";
import { cn } from "@/utils/styling/cn";

export const Phone = () => {
  const [containerRef, bounds] = useMeasure({ scroll: false });

  const [isHovering, setIsHovering] = useState(false);

  const [modelReady, setModelReady] = useState(false);

  const [hasMeasured, setHasMeasured] = useState(false);
  const [hasEntered, setHasEntered] = useState(false);

  console.log("bounds", bounds);

  const onModelReady = useCallback(() => {
    console.log("ready");
    setModelReady(true);
  }, []);

  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);

  const pointerRotateX = useSpring(
    useTransform(
      mouseY,
      [-(bounds.height / 2), bounds.height / 2],
      [-Math.PI / 12, Math.PI / 12]
    ),
    { damping: 12, mass: 1, stiffness: 80 }
  );

  const pointerRotateY = useSpring(
    useTransform(
      mouseX,
      [-(bounds.width / 2), bounds.width / 2],
      [-Math.PI / 8, Math.PI / 8]
    ),
    { damping: 12, mass: 1, stiffness: 80 }
  );

  const translateY = useMotionValue(-0.25);
  const initialRotateX = useMotionValue(-Math.PI / 3);
  const initialRotateY = useMotionValue(-Math.PI);
  const initialRotateZ = useMotionValue(-Math.PI / 4);

  const onHoverStart: HoverHandlers["onHoverStart"] = () => {
    setIsHovering(true);
  };

  const onHoverEnd: HoverHandlers["onHoverEnd"] = () => {
    setIsHovering(false);
    mouseX.set(0);
    mouseY.set(0);
  };

  const onPointerMove = useCallback<PointerEventHandler<HTMLDivElement>>(
    ({ clientX, clientY }) => {
      console.log("move");
      if (hasEntered) {
        const x = clientX - bounds.x - bounds.width / 2;
        mouseX.set(x);

        const y = clientY - bounds.y - bounds.height / 2;
        mouseY.set(y);

        // mouseX.set(clientX - bounds.x - bounds.width / 2);
        // mouseY.set(clientY - bounds.y - bounds.height / 2);
      }
    },
    [hasEntered, bounds, mouseX, mouseY]
  );

  /**
   * Detect when the container has been measured and update the state to
   * reflect this.
   */
  useEffect(() => {
    if (!hasMeasured && bounds.width && bounds.height) {
      setHasMeasured(true);
    }
  }, [hasMeasured, bounds]);

  const performEntryAnimation = useCallback(async () => {
    await Promise.all([
      animate(initialRotateX, 0, {
        ease: "easeOut",
        duration: 4,
      }),
      animate(initialRotateY, 0, {
        ease: "easeOut",
        duration: 4,
      }),
      animate(initialRotateZ, 0, {
        ease: "easeOut",
        duration: 4,
      }),
      animate(translateY, 0, {
        ease: "easeOut",
        duration: 4,
      }),
    ]);
    setHasEntered(true);
  }, [translateY, initialRotateX, initialRotateY, initialRotateZ]);

  useEffect(() => {
    if (hasMeasured && modelReady && !hasEntered) {
      void performEntryAnimation();
    }
  }, [hasMeasured, modelReady, hasEntered, performEntryAnimation]);

  return (
    // <div className="h-64 w-64 bg-lime-500">test</div>
    <div
      className={cn(
        "h-[450px]",
        "relative",
        hasEntered ? "overflow-visible" : "overflow-hidden"
      )}
    >
      <div
        className={cn(
          "absolute -inset-12",
          "pointer-events-none [&>div]:!pointer-events-none"
        )}
      >
        <Suspense fallback={null}>
          <Canvas>
            <Environment
              background={false}
              environmentIntensity={1}
              environmentRotation={[0, Math.PI / 2, 0]}
              files="/3d/environment.hdr"
            />

            <Bounds fit clip observe margin={1.15} maxDuration={0}>
              <LaptopModel
                onReady={onModelReady}
                scale={hasEntered && isHovering ? 1.25 : 1}
                rotate={{
                  x: hasEntered ? pointerRotateX : initialRotateX,
                  y: hasEntered ? pointerRotateY : initialRotateY,
                  z: initialRotateZ,
                }}
                translateY={translateY}
              />
              {/* <Model
                onReady={onModelReady}
                scale={hasEntered && isHovering ? 1.25 : 1}
                rotate={{
                  x: hasEntered ? pointerRotateX : initialRotateX,
                  y: hasEntered ? pointerRotateY : initialRotateY,
                  z: initialRotateZ,
                }}
                translateY={translateY}
              /> */}
            </Bounds>
          </Canvas>
        </Suspense>
      </div>
      <motion.div
        ref={containerRef}
        className={cn(
          "h-full w-full",
          "rounded-6xl",
          "bg-gray-100 dark:bg-gray-925"
        )}
        onPointerMove={onPointerMove}
        onHoverStart={onHoverStart}
        onHoverEnd={onHoverEnd}
      />
    </div>
  );
};

/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation UpdateTechnologyMutation($id: ID!, $data: TechnologyUpdateInput!) {\n  updateTechnology(where: {id: $id}, data: $data) {\n    id\n  }\n}": types.UpdateTechnologyMutationDocument,
    "fragment BeliefData on Belief {\n  id\n  title\n  description\n}\n\nfragment BeliefsSectionData on BeliefsSection {\n  id\n  beliefs {\n    ...BeliefData\n  }\n}\n\nfragment LocationData on LocationItem {\n  id\n  city\n  country\n  coordinates {\n    latitude\n    longitude\n  }\n}\n\nfragment PersonalOverviewSectionData on PersonalOverviewSection {\n  id\n  profilePhoto {\n    id\n    url(transformation: {image: {resize: {width: 512, height: 512}}})\n  }\n  name\n  pronouns\n  description {\n    markdown\n  }\n  location {\n    ...LocationData\n  }\n}\n\nfragment CardListSectionCompanyItemData on Company {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment CardListSectionEducationalInstitutionItemData on EducationalInstitution {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment CardListSectionProjectItemData on Project {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n  personalProject\n  company {\n    id\n  }\n  courses {\n    id\n  }\n}\n\nfragment CardListSectionData on CardListSection {\n  id\n  items {\n    ... on Company {\n      ...CardListSectionCompanyItemData\n    }\n    ... on EducationalInstitution {\n      ...CardListSectionEducationalInstitutionItemData\n    }\n    ... on Project {\n      ...CardListSectionProjectItemData\n    }\n  }\n}\n\nfragment ContactFormSectionData on ContactFormSection {\n  id\n}\n\nfragment GeneralPageData on GeneralPage {\n  heading\n  subHeading\n  sections {\n    ...BeliefsSectionData\n    ...PersonalOverviewSectionData\n    ...CardListSectionData\n    ...ContactFormSectionData\n  }\n}\n\nquery GeneralPage($id: ID!) {\n  generalPage(where: {id: $id}) {\n    ...GeneralPageData\n  }\n}": types.BeliefDataFragmentDoc,
    "query AllProjectSummariesQuery {\n  projects(first: 100) {\n    ...ProjectSummaryFields\n  }\n}\n\nfragment ProjectSummaryFields on Project {\n  id\n  slug\n  name\n  logo {\n    primary {\n      url\n    }\n  }\n}": types.AllProjectSummariesQueryDocument,
    "query ProjectQuery($slug: String) {\n  project(where: {slug: $slug}) {\n    ...AllProjectFields\n  }\n}\n\nfragment AllProjectFields on Project {\n  id\n  name\n}": types.ProjectQueryDocument,
    "fragment ResumeTechnologyData on Technology {\n  id\n  name\n  url\n}\n\nfragment ResumeCompanyData on Company {\n  id\n  slug\n  name\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment ResumeProjectData on Project {\n  id\n  slug\n  name\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment ResumeData on Resume {\n  technologies(first: 100) {\n    ...ResumeTechnologyData\n  }\n  companies(first: 100) {\n    ...ResumeCompanyData\n  }\n  projects(first: 100) {\n    ...ResumeProjectData\n  }\n}\n\nquery Resume($id: ID!) {\n  resume(where: {id: $id}) {\n    ...ResumeData\n  }\n}": types.ResumeTechnologyDataFragmentDoc,
    "query TechnologiesQuery {\n  technologies(first: 100) {\n    ...AllTechnologyFields\n  }\n}\n\nfragment AllTechnologyFields on Technology {\n  id\n  name\n  url\n  logo {\n    id\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  categories\n  projects {\n    id\n  }\n}": types.TechnologiesQueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateTechnologyMutation($id: ID!, $data: TechnologyUpdateInput!) {\n  updateTechnology(where: {id: $id}, data: $data) {\n    id\n  }\n}"): (typeof documents)["mutation UpdateTechnologyMutation($id: ID!, $data: TechnologyUpdateInput!) {\n  updateTechnology(where: {id: $id}, data: $data) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BeliefData on Belief {\n  id\n  title\n  description\n}\n\nfragment BeliefsSectionData on BeliefsSection {\n  id\n  beliefs {\n    ...BeliefData\n  }\n}\n\nfragment LocationData on LocationItem {\n  id\n  city\n  country\n  coordinates {\n    latitude\n    longitude\n  }\n}\n\nfragment PersonalOverviewSectionData on PersonalOverviewSection {\n  id\n  profilePhoto {\n    id\n    url(transformation: {image: {resize: {width: 512, height: 512}}})\n  }\n  name\n  pronouns\n  description {\n    markdown\n  }\n  location {\n    ...LocationData\n  }\n}\n\nfragment CardListSectionCompanyItemData on Company {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment CardListSectionEducationalInstitutionItemData on EducationalInstitution {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment CardListSectionProjectItemData on Project {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n  personalProject\n  company {\n    id\n  }\n  courses {\n    id\n  }\n}\n\nfragment CardListSectionData on CardListSection {\n  id\n  items {\n    ... on Company {\n      ...CardListSectionCompanyItemData\n    }\n    ... on EducationalInstitution {\n      ...CardListSectionEducationalInstitutionItemData\n    }\n    ... on Project {\n      ...CardListSectionProjectItemData\n    }\n  }\n}\n\nfragment ContactFormSectionData on ContactFormSection {\n  id\n}\n\nfragment GeneralPageData on GeneralPage {\n  heading\n  subHeading\n  sections {\n    ...BeliefsSectionData\n    ...PersonalOverviewSectionData\n    ...CardListSectionData\n    ...ContactFormSectionData\n  }\n}\n\nquery GeneralPage($id: ID!) {\n  generalPage(where: {id: $id}) {\n    ...GeneralPageData\n  }\n}"): (typeof documents)["fragment BeliefData on Belief {\n  id\n  title\n  description\n}\n\nfragment BeliefsSectionData on BeliefsSection {\n  id\n  beliefs {\n    ...BeliefData\n  }\n}\n\nfragment LocationData on LocationItem {\n  id\n  city\n  country\n  coordinates {\n    latitude\n    longitude\n  }\n}\n\nfragment PersonalOverviewSectionData on PersonalOverviewSection {\n  id\n  profilePhoto {\n    id\n    url(transformation: {image: {resize: {width: 512, height: 512}}})\n  }\n  name\n  pronouns\n  description {\n    markdown\n  }\n  location {\n    ...LocationData\n  }\n}\n\nfragment CardListSectionCompanyItemData on Company {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment CardListSectionEducationalInstitutionItemData on EducationalInstitution {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment CardListSectionProjectItemData on Project {\n  id\n  slug\n  name\n  logo {\n    primary {\n      id\n      url(transformation: {image: {resize: {width: 512, height: 512, fit: max}}})\n    }\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  timeFrame {\n    startDate\n    endDate\n  }\n  personalProject\n  company {\n    id\n  }\n  courses {\n    id\n  }\n}\n\nfragment CardListSectionData on CardListSection {\n  id\n  items {\n    ... on Company {\n      ...CardListSectionCompanyItemData\n    }\n    ... on EducationalInstitution {\n      ...CardListSectionEducationalInstitutionItemData\n    }\n    ... on Project {\n      ...CardListSectionProjectItemData\n    }\n  }\n}\n\nfragment ContactFormSectionData on ContactFormSection {\n  id\n}\n\nfragment GeneralPageData on GeneralPage {\n  heading\n  subHeading\n  sections {\n    ...BeliefsSectionData\n    ...PersonalOverviewSectionData\n    ...CardListSectionData\n    ...ContactFormSectionData\n  }\n}\n\nquery GeneralPage($id: ID!) {\n  generalPage(where: {id: $id}) {\n    ...GeneralPageData\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProjectSummariesQuery {\n  projects(first: 100) {\n    ...ProjectSummaryFields\n  }\n}\n\nfragment ProjectSummaryFields on Project {\n  id\n  slug\n  name\n  logo {\n    primary {\n      url\n    }\n  }\n}"): (typeof documents)["query AllProjectSummariesQuery {\n  projects(first: 100) {\n    ...ProjectSummaryFields\n  }\n}\n\nfragment ProjectSummaryFields on Project {\n  id\n  slug\n  name\n  logo {\n    primary {\n      url\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProjectQuery($slug: String) {\n  project(where: {slug: $slug}) {\n    ...AllProjectFields\n  }\n}\n\nfragment AllProjectFields on Project {\n  id\n  name\n}"): (typeof documents)["query ProjectQuery($slug: String) {\n  project(where: {slug: $slug}) {\n    ...AllProjectFields\n  }\n}\n\nfragment AllProjectFields on Project {\n  id\n  name\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ResumeTechnologyData on Technology {\n  id\n  name\n  url\n}\n\nfragment ResumeCompanyData on Company {\n  id\n  slug\n  name\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment ResumeProjectData on Project {\n  id\n  slug\n  name\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment ResumeData on Resume {\n  technologies(first: 100) {\n    ...ResumeTechnologyData\n  }\n  companies(first: 100) {\n    ...ResumeCompanyData\n  }\n  projects(first: 100) {\n    ...ResumeProjectData\n  }\n}\n\nquery Resume($id: ID!) {\n  resume(where: {id: $id}) {\n    ...ResumeData\n  }\n}"): (typeof documents)["fragment ResumeTechnologyData on Technology {\n  id\n  name\n  url\n}\n\nfragment ResumeCompanyData on Company {\n  id\n  slug\n  name\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment ResumeProjectData on Project {\n  id\n  slug\n  name\n  timeFrame {\n    startDate\n    endDate\n  }\n}\n\nfragment ResumeData on Resume {\n  technologies(first: 100) {\n    ...ResumeTechnologyData\n  }\n  companies(first: 100) {\n    ...ResumeCompanyData\n  }\n  projects(first: 100) {\n    ...ResumeProjectData\n  }\n}\n\nquery Resume($id: ID!) {\n  resume(where: {id: $id}) {\n    ...ResumeData\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TechnologiesQuery {\n  technologies(first: 100) {\n    ...AllTechnologyFields\n  }\n}\n\nfragment AllTechnologyFields on Technology {\n  id\n  name\n  url\n  logo {\n    id\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  categories\n  projects {\n    id\n  }\n}"): (typeof documents)["query TechnologiesQuery {\n  technologies(first: 100) {\n    ...AllTechnologyFields\n  }\n}\n\nfragment AllTechnologyFields on Technology {\n  id\n  name\n  url\n  logo {\n    id\n  }\n  colors {\n    primary {\n      hex\n    }\n    text {\n      hex\n    }\n    background {\n      hex\n    }\n  }\n  categories\n  projects {\n    id\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;